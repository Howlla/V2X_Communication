var VehicleMonitor = artifacts.require('VehicleMonitor')

contract('VehicleMonitor', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    const ownerID = accounts[0];
    const gatewayId = accounts[1];
    const lawEnforcementId = accounts[2];
    const vehicleId = accounts[3];
    const blacklistVehicleId = accounts[4];
    const VehicleLatitude = "53.10";
    const VehicleLongitude = "57.62";
    const locationBytes32 = web3.fromAscii(VehicleLatitude+"||"+VehicleLongitude);

    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44   

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Gateway: accounts[1] ", accounts[1])
    console.log("Law Enforcement: accounts[2] ", accounts[2])
    console.log("vehicleId: accounts[3] ", accounts[3])
    console.log("blacklistVehicle: accounts[4] ", accounts[4])
    console.log("locationbytes32: ",locationBytes32)

    // 1st Test
    it("Testing smart contract function addLawEnforcement() that adds a law enforcer", async() => {

        const vehicleMonitor = await VehicleMonitor.deployed();
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        var event = vehicleMonitor.LawEnforcementAdded()
        await event.watch((err, res) => {
            eventEmitted = true
        });

        // Mark an item as Harvested by calling function harvestItem()
        await vehicleMonitor.addLawEnforcement(lawEnforcementId);

        // Retrieve the just now saved item from blockchain by calling function islawEnforcement()
        const resultBufferOne = await vehicleMonitor.isLawEnforcement.call(lawEnforcementId);

        // Verify the result set
        assert.equal(resultBufferOne, true, 'Error: Law Enforcement Not added');        
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 2rd Test
    it("Testing smart contract function blacklist() that allows a registered law enforcer to blacklist vehicle", async() => {
        const vehicleMonitor = await VehicleMonitor.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        var event = vehicleMonitor.Blacklist()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        await vehicleMonitor.blacklist(blacklistVehicleId)

        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    
     // 3rd Test
     it("Testing smart contract function addGateway() that adds a gateway", async() => {
        const vehicleMonitor = await VehicleMonitor.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        var event = vehicleMonitor.GatewayAdded()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function harvestItem()
        await vehicleMonitor.addGateway(gatewayId);

        // Retrieve the just now saved item from blockchain by calling function islawEnforcement()
        const resultBufferOne = await vehicleMonitor.isGateway.call(gatewayId)

        // Verify the result set
        assert.equal(resultBufferOne, true, 'Error: Gateway Not added');        
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    


    // 4th Test
    it("Testing smart contract function danger() that allows a gateway to increase driver danger rating", async() => {
        const vehicleMonitor = await VehicleMonitor.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        var event = vehicleMonitor.Danger()
        await event.watch((err, res) => {
            eventEmitted = true
        })

      
        await vehicleMonitor.danger(0,vehicleId,locationBytes32);

        // Retrieve the just now saved item from blockchain by calling function islawEnforcement()
        const resultBufferOne = await vehicleMonitor.getRating.call(vehicleId)

        // Verify the result set
        assert.equal(resultBufferOne, 1, 'Error: Rating not updated');        
        assert.equal(eventEmitted, true, 'Invalid event emitted');

    });

   

    // 5th Test
    it("Testing smart contract function danger() that allows a gateway to detect blacklisted vehicle and increase driver danger rating", async() => {
        const vehicleMonitor = await VehicleMonitor.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        var event = vehicleMonitor.BlacklistDetected()

        await event.watch((err,res) => {
            eventEmitted = true
        })

        await vehicleMonitor.danger(0,blacklistVehicleId,locationBytes32);

        // Retrieve the just now updated item from blockchain by calling function getRating()
        const resultBufferOne = await vehicleMonitor.getRating.call(blacklistVehicleId)

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted1');

    });


});